import * as i0 from '@angular/core';
import { Directive, Input, NgModule } from '@angular/core';

let id = 1;
const generateId = () => id++;
/* for testing only */
const resetIdCounter = () => (id = 1);

/// MENU - Spec: https://www.w3.org/TR/wai-aria-practices-1.2/#menubutton
class MenuDirective {
    constructor(renderer, changeDetection) {
        this.renderer = renderer;
        this.changeDetection = changeDetection;
        this.static = false;
        this.expanded = false;
        this.menuItems = [];
        this.activeItem = null;
        this.searchQuery = '';
        this.searchDebounce = null;
    }
    toggle(focusAfterExpand = null, focusButtonOnClose = true) {
        if (this.expanded) {
            // close items panel
            this.expanded = false;
            this.menuItemsPanel.collapse();
            this.menuButton.element.removeAttribute('aria-controls');
            this.menuButton.element.removeAttribute('expanded');
            this.menuItems = [];
            this.activeItem = null;
            this.windowClickUnlisten();
            if (focusButtonOnClose) {
                this.menuButton.focus();
            }
            this.changeDetection.markForCheck();
        }
        else {
            // open items panel
            this.expanded = true;
            this.changeDetection.markForCheck();
            setTimeout(() => {
                this.menuItemsPanel.expand();
                this.menuItemsPanel.focus();
                if (this.menuItemsPanel.element != null) {
                    this.menuButton.element.setAttribute('aria-controls', this.menuItemsPanel.element.id);
                }
                this.menuButton.element.setAttribute('expanded', 'true');
                this.windowClickUnlisten = this.initListeners();
                if (focusAfterExpand) {
                    setTimeout(() => this.focusItem(focusAfterExpand));
                }
            });
        }
    }
    focusItem(focusType) {
        const activeItem = this.calculateFocusedItem(focusType);
        if (activeItem === this.activeItem) {
            return;
        }
        this.activeItem = activeItem;
        this.menuItems.forEach((item) => {
            var _a, _b;
            if (this.activeItem) {
                (_a = this.menuItemsPanel.element) === null || _a === void 0 ? void 0 : _a.setAttribute('aria-activedescendant', this.activeItem.element.id);
            }
            else {
                (_b = this.menuItemsPanel.element) === null || _b === void 0 ? void 0 : _b.removeAttribute('aria-activedescendant');
            }
            item.setActive(item === this.activeItem);
        });
    }
    clickActive() {
        var _a;
        (_a = this.activeItem) === null || _a === void 0 ? void 0 : _a.element.click();
    }
    search(value) {
        if (this.searchDebounce) {
            clearTimeout(this.searchDebounce);
        }
        this.searchDebounce = setTimeout(() => (this.searchQuery = ''), 350);
        this.searchQuery += value.toLocaleLowerCase();
        const matchingItem = this.menuItems.find((item) => {
            var _a;
            const itemText = (_a = item.element.textContent) === null || _a === void 0 ? void 0 : _a.trim().toLocaleLowerCase();
            return (itemText === null || itemText === void 0 ? void 0 : itemText.startsWith(this.searchQuery)) && !item.hlMenuItemDisabled;
        });
        if (matchingItem === undefined || matchingItem === this.activeItem) {
            return;
        }
        this.focusItem({ kind: 'FocusSpecific', item: matchingItem });
    }
    calculateFocusedItem(focusType) {
        const enabledItems = this.menuItems.filter((item) => !item.hlMenuItemDisabled);
        switch (focusType.kind) {
            case 'FocusSpecific':
                return focusType.item;
            case 'FocusNothing':
                return null;
            case 'FocusFirst':
                return enabledItems[0];
            case 'FocusLast':
                return enabledItems[enabledItems.length - 1];
            case 'FocusNext':
                if (this.activeItem === null) {
                    return enabledItems[0];
                }
                else {
                    const nextIndex = Math.min(enabledItems.indexOf(this.activeItem) + 1, enabledItems.length - 1);
                    return enabledItems[nextIndex];
                }
            case 'FocusPrevious':
                if (this.activeItem === null) {
                    return enabledItems[enabledItems.length - 1];
                }
                else {
                    const previousIndex = Math.max(enabledItems.indexOf(this.activeItem) - 1, 0);
                    return enabledItems[previousIndex];
                }
        }
    }
    initListeners() {
        return this.renderer.listen(window, 'click', (event) => {
            var _a, _b;
            const target = event.target;
            const active = document.activeElement;
            if (this.menuButton.element.contains(target) ||
                ((_b = (_a = this.menuItemsPanel) === null || _a === void 0 ? void 0 : _a.element) === null || _b === void 0 ? void 0 : _b.contains(target))) {
                return;
            }
            const clickedTargetIsFocusable = active !== document.body && (active === null || active === void 0 ? void 0 : active.contains(target));
            // do not focus button if the clicked element is itself focusable
            this.toggle(null, !clickedTargetIsFocusable);
        });
    }
}
MenuDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MenuDirective, deps: [{ token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });
MenuDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: MenuDirective, selector: "[hlMenu]", inputs: { static: "static" }, exportAs: ["hlMenu"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MenuDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[hlMenu]',
                    exportAs: 'hlMenu',
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { static: [{
                type: Input
            }] } });
// MENU ITEM BUTTON
class MenuButtonDirective {
    constructor(elementRef, menu, renderer) {
        this.menu = menu;
        this.renderer = renderer;
        this.element = elementRef.nativeElement;
        menu.menuButton = this;
    }
    ngOnInit() {
        this.initAttributes(this.element);
        this.renderer.listen(this.element, 'click', () => {
            this.menu.toggle();
        });
        this.renderer.listen(this.element, 'keydown', (event) => {
            switch (event.key) {
                case ' ': // Space
                case 'Enter':
                case 'ArrowDown':
                    event.preventDefault();
                    this.menu.toggle({ kind: 'FocusFirst' });
                    break;
                case 'ArrowUp':
                    event.preventDefault();
                    this.menu.toggle({ kind: 'FocusLast' });
                    break;
            }
        });
    }
    focus() {
        setTimeout(() => { var _a; return (_a = this.element) === null || _a === void 0 ? void 0 : _a.focus(); });
    }
    initAttributes(element) {
        element.id = `headlessui-menu-button-${generateId()}`;
        element.setAttribute('type', 'button');
        element.setAttribute('aria-haspopup', 'true');
    }
}
MenuButtonDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MenuButtonDirective, deps: [{ token: i0.ElementRef }, { token: MenuDirective }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
MenuButtonDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: MenuButtonDirective, selector: "[hlMenuButton]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MenuButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[hlMenuButton]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: MenuDirective }, { type: i0.Renderer2 }]; } });
/// MENU ITEMS PANEL
class MenuItemsPanelDirective {
    constructor(templateRef, viewContainerRef, menu, renderer) {
        this.templateRef = templateRef;
        this.viewContainerRef = viewContainerRef;
        this.menu = menu;
        this.renderer = renderer;
        this.element = null;
        this.menu.menuItemsPanel = this;
    }
    ngOnInit() {
        if (this.menu.static) {
            this.expandInternal();
        }
    }
    expand() {
        if (!this.menu.static) {
            this.expandInternal();
        }
    }
    collapse() {
        if (!this.menu.static) {
            this.viewContainerRef.clear();
            this.element = null;
        }
    }
    focus() {
        var _a;
        (_a = this.element) === null || _a === void 0 ? void 0 : _a.focus({ preventScroll: true });
    }
    expandInternal() {
        const view = this.viewContainerRef.createEmbeddedView(this.templateRef);
        const element = view.rootNodes[0];
        this.initAttributes(element);
        this.initListeners(element);
        this.element = element;
        view.markForCheck();
    }
    initAttributes(element) {
        element.tabIndex = -1;
        element.id = `headlessui-menu-items-${generateId()}`;
        element.setAttribute('role', 'menu');
        element.setAttribute('aria-labelledby', this.menu.menuButton.element.id);
    }
    initListeners(element) {
        this.renderer.listen(element, 'keydown', (event) => {
            switch (event.key) {
                case ' ': // Space
                    if (this.menu.searchQuery !== '') {
                        event.preventDefault();
                        this.menu.search(event.key);
                    }
                    else {
                        event.preventDefault();
                        this.menu.clickActive();
                    }
                    break;
                case 'Enter':
                    event.preventDefault();
                    this.menu.clickActive();
                    break;
                case 'ArrowDown':
                    event.preventDefault();
                    this.menu.focusItem({ kind: 'FocusNext' });
                    break;
                case 'ArrowUp':
                    event.preventDefault();
                    this.menu.focusItem({ kind: 'FocusPrevious' });
                    break;
                case 'Home':
                case 'PageUp':
                    event.preventDefault();
                    this.menu.focusItem({ kind: 'FocusFirst' });
                    break;
                case 'End':
                case 'PageDown':
                    event.preventDefault();
                    this.menu.focusItem({ kind: 'FocusLast' });
                    break;
                case 'Escape':
                    event.preventDefault();
                    this.menu.toggle();
                    break;
                case 'Tab':
                    event.preventDefault();
                    break;
                default:
                    if (event.key.length === 1) {
                        this.menu.search(event.key);
                    }
            }
        });
    }
}
MenuItemsPanelDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MenuItemsPanelDirective, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: MenuDirective }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
MenuItemsPanelDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: MenuItemsPanelDirective, selector: "[hlMenuItems]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MenuItemsPanelDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[hlMenuItems]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: MenuDirective }, { type: i0.Renderer2 }]; } });
// MENU ITEM
class MenuItemDirective {
    constructor(templateRef, viewContainerRef, menu, renderer) {
        this.templateRef = templateRef;
        this.viewContainerRef = viewContainerRef;
        this.menu = menu;
        this.renderer = renderer;
        this.hlMenuItemDisabled = false;
        this.context = { active: false };
        this.menu.menuItems.push(this);
    }
    ngOnInit() {
        this.view = this.viewContainerRef.createEmbeddedView(this.templateRef, {
            $implicit: this.context,
        });
        this.element = this.view.rootNodes[0];
        this.initAttributes(this.element);
        this.initListeners(this.element);
    }
    setActive(active) {
        this.context.active = active;
        this.view.markForCheck();
    }
    initAttributes(element) {
        element.id = `headlessui-menu-item-${generateId()}`;
        element.tabIndex = -1;
        element.setAttribute('role', 'menuitem');
        if (this.hlMenuItemDisabled) {
            this.element.setAttribute('aria-disabled', 'true');
        }
        else {
            this.element.removeAttribute('aria-disabled');
        }
    }
    initListeners(element) {
        this.renderer.listen(element, 'pointermove', () => this.menu.focusItem({ kind: 'FocusSpecific', item: this }));
        this.renderer.listen(element, 'pointerleave', () => this.menu.focusItem({ kind: 'FocusNothing' }));
        this.renderer.listen(element, 'click', (event) => {
            if (this.hlMenuItemDisabled) {
                event.preventDefault();
                return;
            }
            this.menu.toggle();
        });
    }
}
MenuItemDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MenuItemDirective, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: MenuDirective }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
MenuItemDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: MenuItemDirective, selector: "[hlMenuItem]", inputs: { hlMenuItemDisabled: "hlMenuItemDisabled" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MenuItemDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[hlMenuItem]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: MenuDirective }, { type: i0.Renderer2 }]; }, propDecorators: { hlMenuItemDisabled: [{
                type: Input
            }] } });
class MenuModule {
}
MenuModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
MenuModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MenuModule, declarations: [MenuDirective, MenuButtonDirective, MenuItemsPanelDirective, MenuItemDirective], exports: [MenuDirective, MenuButtonDirective, MenuItemsPanelDirective, MenuItemDirective] });
MenuModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MenuModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MenuModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    exports: [
                        MenuDirective,
                        MenuButtonDirective,
                        MenuItemsPanelDirective,
                        MenuItemDirective,
                    ],
                    declarations: [
                        MenuDirective,
                        MenuButtonDirective,
                        MenuItemsPanelDirective,
                        MenuItemDirective,
                    ],
                    providers: [],
                }]
        }] });

// eslint-disable-next-line @typescript-eslint/semi

/**
 * Generated bundle index. Do not edit.
 */

export { MenuButtonDirective, MenuDirective, MenuItemDirective, MenuItemsPanelDirective, MenuModule };
//# sourceMappingURL=headlessui-angular.mjs.map
