import { Directive, Input, NgModule, } from '@angular/core';
import { generateId } from '../util';
import * as i0 from "@angular/core";
/// MENU - Spec: https://www.w3.org/TR/wai-aria-practices-1.2/#menubutton
export class MenuDirective {
    constructor(renderer, changeDetection) {
        this.renderer = renderer;
        this.changeDetection = changeDetection;
        this.static = false;
        this.expanded = false;
        this.menuItems = [];
        this.activeItem = null;
        this.searchQuery = '';
        this.searchDebounce = null;
    }
    toggle(focusAfterExpand = null, focusButtonOnClose = true) {
        if (this.expanded) {
            // close items panel
            this.expanded = false;
            this.menuItemsPanel.collapse();
            this.menuButton.element.removeAttribute('aria-controls');
            this.menuButton.element.removeAttribute('expanded');
            this.menuItems = [];
            this.activeItem = null;
            this.windowClickUnlisten();
            if (focusButtonOnClose) {
                this.menuButton.focus();
            }
            this.changeDetection.markForCheck();
        }
        else {
            // open items panel
            this.expanded = true;
            this.changeDetection.markForCheck();
            setTimeout(() => {
                this.menuItemsPanel.expand();
                this.menuItemsPanel.focus();
                if (this.menuItemsPanel.element != null) {
                    this.menuButton.element.setAttribute('aria-controls', this.menuItemsPanel.element.id);
                }
                this.menuButton.element.setAttribute('expanded', 'true');
                this.windowClickUnlisten = this.initListeners();
                if (focusAfterExpand) {
                    setTimeout(() => this.focusItem(focusAfterExpand));
                }
            });
        }
    }
    focusItem(focusType) {
        const activeItem = this.calculateFocusedItem(focusType);
        if (activeItem === this.activeItem) {
            return;
        }
        this.activeItem = activeItem;
        this.menuItems.forEach((item) => {
            if (this.activeItem) {
                this.menuItemsPanel.element?.setAttribute('aria-activedescendant', this.activeItem.element.id);
            }
            else {
                this.menuItemsPanel.element?.removeAttribute('aria-activedescendant');
            }
            item.setActive(item === this.activeItem);
        });
    }
    clickActive() {
        this.activeItem?.element.click();
    }
    search(value) {
        if (this.searchDebounce) {
            clearTimeout(this.searchDebounce);
        }
        this.searchDebounce = setTimeout(() => (this.searchQuery = ''), 350);
        this.searchQuery += value.toLocaleLowerCase();
        const matchingItem = this.menuItems.find((item) => {
            const itemText = item.element.textContent?.trim().toLocaleLowerCase();
            return itemText?.startsWith(this.searchQuery) && !item.hlMenuItemDisabled;
        });
        if (matchingItem === undefined || matchingItem === this.activeItem) {
            return;
        }
        this.focusItem({ kind: 'FocusSpecific', item: matchingItem });
    }
    calculateFocusedItem(focusType) {
        const enabledItems = this.menuItems.filter((item) => !item.hlMenuItemDisabled);
        switch (focusType.kind) {
            case 'FocusSpecific':
                return focusType.item;
            case 'FocusNothing':
                return null;
            case 'FocusFirst':
                return enabledItems[0];
            case 'FocusLast':
                return enabledItems[enabledItems.length - 1];
            case 'FocusNext':
                if (this.activeItem === null) {
                    return enabledItems[0];
                }
                else {
                    const nextIndex = Math.min(enabledItems.indexOf(this.activeItem) + 1, enabledItems.length - 1);
                    return enabledItems[nextIndex];
                }
            case 'FocusPrevious':
                if (this.activeItem === null) {
                    return enabledItems[enabledItems.length - 1];
                }
                else {
                    const previousIndex = Math.max(enabledItems.indexOf(this.activeItem) - 1, 0);
                    return enabledItems[previousIndex];
                }
        }
    }
    initListeners() {
        return this.renderer.listen(window, 'click', (event) => {
            const target = event.target;
            const active = document.activeElement;
            if (this.menuButton.element.contains(target) ||
                this.menuItemsPanel?.element?.contains(target)) {
                return;
            }
            const clickedTargetIsFocusable = active !== document.body && active?.contains(target);
            // do not focus button if the clicked element is itself focusable
            this.toggle(null, !clickedTargetIsFocusable);
        });
    }
}
MenuDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MenuDirective, deps: [{ token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });
MenuDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: MenuDirective, selector: "[hlMenu]", inputs: { static: "static" }, exportAs: ["hlMenu"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MenuDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[hlMenu]',
                    exportAs: 'hlMenu',
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { static: [{
                type: Input
            }] } });
// MENU ITEM BUTTON
export class MenuButtonDirective {
    constructor(elementRef, menu, renderer) {
        this.menu = menu;
        this.renderer = renderer;
        this.element = elementRef.nativeElement;
        menu.menuButton = this;
    }
    ngOnInit() {
        this.initAttributes(this.element);
        this.renderer.listen(this.element, 'click', () => {
            this.menu.toggle();
        });
        this.renderer.listen(this.element, 'keydown', (event) => {
            switch (event.key) {
                case ' ': // Space
                case 'Enter':
                case 'ArrowDown':
                    event.preventDefault();
                    this.menu.toggle({ kind: 'FocusFirst' });
                    break;
                case 'ArrowUp':
                    event.preventDefault();
                    this.menu.toggle({ kind: 'FocusLast' });
                    break;
            }
        });
    }
    focus() {
        setTimeout(() => this.element?.focus());
    }
    initAttributes(element) {
        element.id = `headlessui-menu-button-${generateId()}`;
        element.setAttribute('type', 'button');
        element.setAttribute('aria-haspopup', 'true');
    }
}
MenuButtonDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MenuButtonDirective, deps: [{ token: i0.ElementRef }, { token: MenuDirective }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
MenuButtonDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: MenuButtonDirective, selector: "[hlMenuButton]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MenuButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[hlMenuButton]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: MenuDirective }, { type: i0.Renderer2 }]; } });
/// MENU ITEMS PANEL
export class MenuItemsPanelDirective {
    constructor(templateRef, viewContainerRef, menu, renderer) {
        this.templateRef = templateRef;
        this.viewContainerRef = viewContainerRef;
        this.menu = menu;
        this.renderer = renderer;
        this.element = null;
        this.menu.menuItemsPanel = this;
    }
    ngOnInit() {
        if (this.menu.static) {
            this.expandInternal();
        }
    }
    expand() {
        if (!this.menu.static) {
            this.expandInternal();
        }
    }
    collapse() {
        if (!this.menu.static) {
            this.viewContainerRef.clear();
            this.element = null;
        }
    }
    focus() {
        this.element?.focus({ preventScroll: true });
    }
    expandInternal() {
        const view = this.viewContainerRef.createEmbeddedView(this.templateRef);
        const element = view.rootNodes[0];
        this.initAttributes(element);
        this.initListeners(element);
        this.element = element;
        view.markForCheck();
    }
    initAttributes(element) {
        element.tabIndex = -1;
        element.id = `headlessui-menu-items-${generateId()}`;
        element.setAttribute('role', 'menu');
        element.setAttribute('aria-labelledby', this.menu.menuButton.element.id);
    }
    initListeners(element) {
        this.renderer.listen(element, 'keydown', (event) => {
            switch (event.key) {
                case ' ': // Space
                    if (this.menu.searchQuery !== '') {
                        event.preventDefault();
                        this.menu.search(event.key);
                    }
                    else {
                        event.preventDefault();
                        this.menu.clickActive();
                    }
                    break;
                case 'Enter':
                    event.preventDefault();
                    this.menu.clickActive();
                    break;
                case 'ArrowDown':
                    event.preventDefault();
                    this.menu.focusItem({ kind: 'FocusNext' });
                    break;
                case 'ArrowUp':
                    event.preventDefault();
                    this.menu.focusItem({ kind: 'FocusPrevious' });
                    break;
                case 'Home':
                case 'PageUp':
                    event.preventDefault();
                    this.menu.focusItem({ kind: 'FocusFirst' });
                    break;
                case 'End':
                case 'PageDown':
                    event.preventDefault();
                    this.menu.focusItem({ kind: 'FocusLast' });
                    break;
                case 'Escape':
                    event.preventDefault();
                    this.menu.toggle();
                    break;
                case 'Tab':
                    event.preventDefault();
                    break;
                default:
                    if (event.key.length === 1) {
                        this.menu.search(event.key);
                    }
            }
        });
    }
}
MenuItemsPanelDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MenuItemsPanelDirective, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: MenuDirective }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
MenuItemsPanelDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: MenuItemsPanelDirective, selector: "[hlMenuItems]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MenuItemsPanelDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[hlMenuItems]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: MenuDirective }, { type: i0.Renderer2 }]; } });
// MENU ITEM
export class MenuItemDirective {
    constructor(templateRef, viewContainerRef, menu, renderer) {
        this.templateRef = templateRef;
        this.viewContainerRef = viewContainerRef;
        this.menu = menu;
        this.renderer = renderer;
        this.hlMenuItemDisabled = false;
        this.context = { active: false };
        this.menu.menuItems.push(this);
    }
    ngOnInit() {
        this.view = this.viewContainerRef.createEmbeddedView(this.templateRef, {
            $implicit: this.context,
        });
        this.element = this.view.rootNodes[0];
        this.initAttributes(this.element);
        this.initListeners(this.element);
    }
    setActive(active) {
        this.context.active = active;
        this.view.markForCheck();
    }
    initAttributes(element) {
        element.id = `headlessui-menu-item-${generateId()}`;
        element.tabIndex = -1;
        element.setAttribute('role', 'menuitem');
        if (this.hlMenuItemDisabled) {
            this.element.setAttribute('aria-disabled', 'true');
        }
        else {
            this.element.removeAttribute('aria-disabled');
        }
    }
    initListeners(element) {
        this.renderer.listen(element, 'pointermove', () => this.menu.focusItem({ kind: 'FocusSpecific', item: this }));
        this.renderer.listen(element, 'pointerleave', () => this.menu.focusItem({ kind: 'FocusNothing' }));
        this.renderer.listen(element, 'click', (event) => {
            if (this.hlMenuItemDisabled) {
                event.preventDefault();
                return;
            }
            this.menu.toggle();
        });
    }
}
MenuItemDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MenuItemDirective, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: MenuDirective }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
MenuItemDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: MenuItemDirective, selector: "[hlMenuItem]", inputs: { hlMenuItemDisabled: "hlMenuItemDisabled" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MenuItemDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[hlMenuItem]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: MenuDirective }, { type: i0.Renderer2 }]; }, propDecorators: { hlMenuItemDisabled: [{
                type: Input
            }] } });
export class MenuModule {
}
MenuModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
MenuModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MenuModule, declarations: [MenuDirective, MenuButtonDirective, MenuItemsPanelDirective, MenuItemDirective], exports: [MenuDirective, MenuButtonDirective, MenuItemsPanelDirective, MenuItemDirective] });
MenuModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MenuModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MenuModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    exports: [
                        MenuDirective,
                        MenuButtonDirective,
                        MenuItemsPanelDirective,
                        MenuItemDirective,
                    ],
                    declarations: [
                        MenuDirective,
                        MenuButtonDirective,
                        MenuItemsPanelDirective,
                        MenuItemDirective,
                    ],
                    providers: [],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVudS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2hlYWRsZXNzdWktYW5ndWxhci9zcmMvbGliL21lbnUvbWVudS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsU0FBUyxFQUdULEtBQUssRUFDTCxRQUFRLEdBS1QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFNBQVMsQ0FBQzs7QUFFckMseUVBQXlFO0FBTXpFLE1BQU0sT0FBTyxhQUFhO0lBY3hCLFlBQ1UsUUFBbUIsRUFDbkIsZUFBa0M7UUFEbEMsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUNuQixvQkFBZSxHQUFmLGVBQWUsQ0FBbUI7UUFkNUMsV0FBTSxHQUFHLEtBQUssQ0FBQztRQUVmLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFLakIsY0FBUyxHQUF3QixFQUFFLENBQUM7UUFDcEMsZUFBVSxHQUE2QixJQUFJLENBQUM7UUFDNUMsZ0JBQVcsR0FBRyxFQUFFLENBQUM7UUFDakIsbUJBQWMsR0FBeUMsSUFBSSxDQUFDO0lBS3pELENBQUM7SUFFSixNQUFNLENBQUMsbUJBQXFDLElBQUksRUFBRSxrQkFBa0IsR0FBRyxJQUFJO1FBQ3pFLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQixvQkFBb0I7WUFDcEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7WUFDdEIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUMvQixJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDLENBQUM7WUFDekQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3BELElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1lBQ3BCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFD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QUFtQjt3QkFDbkIsdUJBQXVCO3dCQUN2QixpQkFBaUI7cUJBQ2xCO29CQUNELFNBQVMsRUFBRSxFQUFFO2lCQUNkIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgRW1iZWRkZWRWaWV3UmVmLFxuICBJbnB1dCxcbiAgTmdNb2R1bGUsXG4gIE9uSW5pdCxcbiAgUmVuZGVyZXIyLFxuICBUZW1wbGF0ZVJlZixcbiAgVmlld0NvbnRhaW5lclJlZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBnZW5lcmF0ZUlkIH0gZnJvbSAnLi4vdXRpbCc7XG5cbi8vLyBNRU5VIC0gU3BlYzogaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLXByYWN0aWNlcy0xLjIvI21lbnVidXR0b25cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2hsTWVudV0nLFxuICBleHBvcnRBczogJ2hsTWVudScsXG59KVxuZXhwb3J0IGNsYXNzIE1lbnVEaXJlY3RpdmUge1xuICBASW5wdXQoKVxuICBzdGF0aWMgPSBmYWxzZTtcblxuICBleHBhbmRlZCA9IGZhbHNlO1xuICB3aW5kb3dDbGlja1VubGlzdGVuITogKCkgPT4gdm9pZDtcblxuICBtZW51QnV0dG9uITogTWVudUJ1dHRvbkRpcmVjdGl2ZTtcbiAgbWVudUl0ZW1zUGFuZWwhOiBNZW51SXRlbXNQYW5lbERpcmVjdGl2ZTtcbiAgbWVudUl0ZW1zOiBNZW51SXRlbURpcmVjdGl2ZVtdID0gW107XG4gIGFjdGl2ZUl0ZW06IE1lbnVJdGVtRGlyZWN0aXZlIHwgbnVsbCA9IG51bGw7XG4gIHNlYXJjaFF1ZXJ5ID0gJyc7XG4gIHNlYXJjaERlYm91bmNlOiBSZXR1cm5UeXBlPHR5cGVvZiBzZXRUaW1lb3V0PiB8IG51bGwgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0b3JSZWZcbiAgKSB7fVxuXG4gIHRvZ2dsZShmb2N1c0FmdGVyRXhwYW5kOiBGb2N1c1R5cGUgfCBudWxsID0gbnVsbCwgZm9jdXNCdXR0b25PbkNsb3NlID0gdHJ1ZSkge1xuICAgIGlmICh0aGlzLmV4cGFuZGVkKSB7XG4gICAgICAvLyBjbG9zZSBpdGVtcyBwYW5lbFxuICAgICAgdGhpcy5leHBhbmRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5tZW51SXRlbXNQYW5lbC5jb2xsYXBzZSgpO1xuICAgICAgdGhpcy5tZW51QnV0dG9uLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWNvbnRyb2xzJyk7XG4gICAgICB0aGlzLm1lbnVCdXR0b24uZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2V4cGFuZGVkJyk7XG4gICAgICB0aGlzLm1lbnVJdGVtcyA9IFtdO1xuICAgICAgdGhpcy5hY3RpdmVJdGVtID0gbnVsbDtcbiAgICAgIHRoaXMud2luZG93Q2xpY2tVbmxpc3RlbigpO1xuICAgICAgaWYgKGZvY3VzQnV0dG9uT25DbG9zZSkge1xuICAgICAgICB0aGlzLm1lbnVCdXR0b24uZm9jdXMoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0aW9uLm1hcmtGb3JDaGVjaygpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBvcGVuIGl0ZW1zIHBhbmVsXG4gICAgICB0aGlzLmV4cGFuZGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0aW9uLm1hcmtGb3JDaGVjaygpO1xuXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5tZW51SXRlbXNQYW5lbC5leHBhbmQoKTtcbiAgICAgICAgdGhpcy5tZW51SXRlbXNQYW5lbC5mb2N1cygpO1xuICAgICAgICBpZiAodGhpcy5tZW51SXRlbXNQYW5lbC5lbGVtZW50ICE9IG51bGwpIHtcbiAgICAgICAgICB0aGlzLm1lbnVCdXR0b24uZWxlbWVudC5zZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgICAnYXJpYS1jb250cm9scycsXG4gICAgICAgICAgICB0aGlzLm1lbnVJdGVtc1BhbmVsLmVsZW1lbnQuaWRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWVudUJ1dHRvbi5lbGVtZW50LnNldEF0dHJpYnV0ZSgnZXhwYW5kZWQnLCAndHJ1ZScpO1xuICAgICAgICB0aGlzLndpbmRvd0NsaWNrVW5saXN0ZW4gPSB0aGlzLmluaXRMaXN0ZW5lcnMoKTtcbiAgICAgICAgaWYgKGZvY3VzQWZ0ZXJFeHBhbmQpIHtcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuZm9jdXNJdGVtKGZvY3VzQWZ0ZXJFeHBhbmQpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZm9jdXNJdGVtKGZvY3VzVHlwZTogRm9jdXNUeXBlKSB7XG4gICAgY29uc3QgYWN0aXZlSXRlbSA9IHRoaXMuY2FsY3VsYXRlRm9jdXNlZEl0ZW0oZm9jdXNUeXBlKTtcbiAgICBpZiAoYWN0aXZlSXRlbSA9PT0gdGhpcy5hY3RpdmVJdGVtKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuYWN0aXZlSXRlbSA9IGFjdGl2ZUl0ZW07XG4gICAgdGhpcy5tZW51SXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgaWYgKHRoaXMuYWN0aXZlSXRlbSkge1xuICAgICAgICB0aGlzLm1lbnVJdGVtc1BhbmVsLmVsZW1lbnQ/LnNldEF0dHJpYnV0ZShcbiAgICAgICAgICAnYXJpYS1hY3RpdmVkZXNjZW5kYW50JyxcbiAgICAgICAgICB0aGlzLmFjdGl2ZUl0ZW0uZWxlbWVudC5pZFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5tZW51SXRlbXNQYW5lbC5lbGVtZW50Py5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcpO1xuICAgICAgfVxuICAgICAgaXRlbS5zZXRBY3RpdmUoaXRlbSA9PT0gdGhpcy5hY3RpdmVJdGVtKTtcbiAgICB9KTtcbiAgfVxuXG4gIGNsaWNrQWN0aXZlKCkge1xuICAgIHRoaXMuYWN0aXZlSXRlbT8uZWxlbWVudC5jbGljaygpO1xuICB9XG5cbiAgc2VhcmNoKHZhbHVlOiBzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5zZWFyY2hEZWJvdW5jZSkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuc2VhcmNoRGVib3VuY2UpO1xuICAgIH1cbiAgICB0aGlzLnNlYXJjaERlYm91bmNlID0gc2V0VGltZW91dCgoKSA9PiAodGhpcy5zZWFyY2hRdWVyeSA9ICcnKSwgMzUwKTtcblxuICAgIHRoaXMuc2VhcmNoUXVlcnkgKz0gdmFsdWUudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICBjb25zdCBtYXRjaGluZ0l0ZW0gPSB0aGlzLm1lbnVJdGVtcy5maW5kKChpdGVtKSA9PiB7XG4gICAgICBjb25zdCBpdGVtVGV4dCA9IGl0ZW0uZWxlbWVudC50ZXh0Q29udGVudD8udHJpbSgpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICByZXR1cm4gaXRlbVRleHQ/LnN0YXJ0c1dpdGgodGhpcy5zZWFyY2hRdWVyeSkgJiYgIWl0ZW0uaGxNZW51SXRlbURpc2FibGVkO1xuICAgIH0pO1xuXG4gICAgaWYgKG1hdGNoaW5nSXRlbSA9PT0gdW5kZWZpbmVkIHx8IG1hdGNoaW5nSXRlbSA9PT0gdGhpcy5hY3RpdmVJdGVtKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5mb2N1c0l0ZW0oeyBraW5kOiAnRm9jdXNTcGVjaWZpYycsIGl0ZW06IG1hdGNoaW5nSXRlbSB9KTtcbiAgfVxuXG4gIHByaXZhdGUgY2FsY3VsYXRlRm9jdXNlZEl0ZW0oZm9jdXNUeXBlOiBGb2N1c1R5cGUpOiBNZW51SXRlbURpcmVjdGl2ZSB8IG51bGwge1xuICAgIGNvbnN0IGVuYWJsZWRJdGVtcyA9IHRoaXMubWVudUl0ZW1zLmZpbHRlcihcbiAgICAgIChpdGVtKSA9PiAhaXRlbS5obE1lbnVJdGVtRGlzYWJsZWRcbiAgICApO1xuXG4gICAgc3dpdGNoIChmb2N1c1R5cGUua2luZCkge1xuICAgICAgY2FzZSAnRm9jdXNTcGVjaWZpYyc6XG4gICAgICAgIHJldHVybiBmb2N1c1R5cGUuaXRlbTtcblxuICAgICAgY2FzZSAnRm9jdXNOb3RoaW5nJzpcbiAgICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICAgIGNhc2UgJ0ZvY3VzRmlyc3QnOlxuICAgICAgICByZXR1cm4gZW5hYmxlZEl0ZW1zWzBdO1xuXG4gICAgICBjYXNlICdGb2N1c0xhc3QnOlxuICAgICAgICByZXR1cm4gZW5hYmxlZEl0ZW1zW2VuYWJsZWRJdGVtcy5sZW5ndGggLSAxXTtcblxuICAgICAgY2FzZSAnRm9jdXNOZXh0JzpcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlSXRlbSA9PT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBlbmFibGVkSXRlbXNbMF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgbmV4dEluZGV4ID0gTWF0aC5taW4oXG4gICAgICAgICAgICBlbmFibGVkSXRlbXMuaW5kZXhPZih0aGlzLmFjdGl2ZUl0ZW0pICsgMSxcbiAgICAgICAgICAgIGVuYWJsZWRJdGVtcy5sZW5ndGggLSAxXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4gZW5hYmxlZEl0ZW1zW25leHRJbmRleF07XG4gICAgICAgIH1cblxuICAgICAgY2FzZSAnRm9jdXNQcmV2aW91cyc6XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZUl0ZW0gPT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gZW5hYmxlZEl0ZW1zW2VuYWJsZWRJdGVtcy5sZW5ndGggLSAxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBwcmV2aW91c0luZGV4ID0gTWF0aC5tYXgoXG4gICAgICAgICAgICBlbmFibGVkSXRlbXMuaW5kZXhPZih0aGlzLmFjdGl2ZUl0ZW0pIC0gMSxcbiAgICAgICAgICAgIDBcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybiBlbmFibGVkSXRlbXNbcHJldmlvdXNJbmRleF07XG4gICAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGluaXRMaXN0ZW5lcnMoKTogKCkgPT4gdm9pZCB7XG4gICAgcmV0dXJuIHRoaXMucmVuZGVyZXIubGlzdGVuKHdpbmRvdywgJ2NsaWNrJywgKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICBjb25zdCBhY3RpdmUgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMubWVudUJ1dHRvbi5lbGVtZW50LmNvbnRhaW5zKHRhcmdldCkgfHxcbiAgICAgICAgdGhpcy5tZW51SXRlbXNQYW5lbD8uZWxlbWVudD8uY29udGFpbnModGFyZ2V0KVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY2xpY2tlZFRhcmdldElzRm9jdXNhYmxlID1cbiAgICAgICAgYWN0aXZlICE9PSBkb2N1bWVudC5ib2R5ICYmIGFjdGl2ZT8uY29udGFpbnModGFyZ2V0KTtcblxuICAgICAgLy8gZG8gbm90IGZvY3VzIGJ1dHRvbiBpZiB0aGUgY2xpY2tlZCBlbGVtZW50IGlzIGl0c2VsZiBmb2N1c2FibGVcbiAgICAgIHRoaXMudG9nZ2xlKG51bGwsICFjbGlja2VkVGFyZ2V0SXNGb2N1c2FibGUpO1xuICAgIH0pO1xuICB9XG59XG5cbi8vIE1FTlUgSVRFTSBCVVRUT05cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2hsTWVudUJ1dHRvbl0nLFxufSlcbmV4cG9ydCBjbGFzcyBNZW51QnV0dG9uRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgZWxlbWVudCE6IEhUTUxFbGVtZW50O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSBtZW51OiBNZW51RGlyZWN0aXZlLFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMlxuICApIHtcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG4gICAgbWVudS5tZW51QnV0dG9uID0gdGhpcztcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuaW5pdEF0dHJpYnV0ZXModGhpcy5lbGVtZW50KTtcblxuICAgIHRoaXMucmVuZGVyZXIubGlzdGVuKHRoaXMuZWxlbWVudCwgJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgdGhpcy5tZW51LnRvZ2dsZSgpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5yZW5kZXJlci5saXN0ZW4odGhpcy5lbGVtZW50LCAna2V5ZG93bicsIChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgc3dpdGNoIChldmVudC5rZXkpIHtcbiAgICAgICAgY2FzZSAnICc6IC8vIFNwYWNlXG4gICAgICAgIGNhc2UgJ0VudGVyJzpcbiAgICAgICAgY2FzZSAnQXJyb3dEb3duJzpcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHRoaXMubWVudS50b2dnbGUoeyBraW5kOiAnRm9jdXNGaXJzdCcgfSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnQXJyb3dVcCc6XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB0aGlzLm1lbnUudG9nZ2xlKHsga2luZDogJ0ZvY3VzTGFzdCcgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmb2N1cygpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuZWxlbWVudD8uZm9jdXMoKSk7XG4gIH1cblxuICBwcml2YXRlIGluaXRBdHRyaWJ1dGVzKGVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gICAgZWxlbWVudC5pZCA9IGBoZWFkbGVzc3VpLW1lbnUtYnV0dG9uLSR7Z2VuZXJhdGVJZCgpfWA7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnYnV0dG9uJyk7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGFzcG9wdXAnLCAndHJ1ZScpO1xuICB9XG59XG5cbi8vLyBNRU5VIElURU1TIFBBTkVMXG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tobE1lbnVJdGVtc10nLFxufSlcbmV4cG9ydCBjbGFzcyBNZW51SXRlbXNQYW5lbERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIGVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PixcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsXG4gICAgcHJpdmF0ZSBtZW51OiBNZW51RGlyZWN0aXZlLFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMlxuICApIHtcbiAgICB0aGlzLm1lbnUubWVudUl0ZW1zUGFuZWwgPSB0aGlzO1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubWVudS5zdGF0aWMpIHtcbiAgICAgIHRoaXMuZXhwYW5kSW50ZXJuYWwoKTtcbiAgICB9XG4gIH1cblxuICBleHBhbmQoKSB7XG4gICAgaWYgKCF0aGlzLm1lbnUuc3RhdGljKSB7XG4gICAgICB0aGlzLmV4cGFuZEludGVybmFsKCk7XG4gICAgfVxuICB9XG5cbiAgY29sbGFwc2UoKSB7XG4gICAgaWYgKCF0aGlzLm1lbnUuc3RhdGljKSB7XG4gICAgICB0aGlzLnZpZXdDb250YWluZXJSZWYuY2xlYXIoKTtcbiAgICAgIHRoaXMuZWxlbWVudCA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgZm9jdXMoKSB7XG4gICAgdGhpcy5lbGVtZW50Py5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSk7XG4gIH1cblxuICBwcml2YXRlIGV4cGFuZEludGVybmFsKCkge1xuICAgIGNvbnN0IHZpZXcgPSB0aGlzLnZpZXdDb250YWluZXJSZWYuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGVSZWYpO1xuICAgIGNvbnN0IGVsZW1lbnQgPSB2aWV3LnJvb3ROb2Rlc1swXTtcbiAgICB0aGlzLmluaXRBdHRyaWJ1dGVzKGVsZW1lbnQpO1xuICAgIHRoaXMuaW5pdExpc3RlbmVycyhlbGVtZW50KTtcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHZpZXcubWFya0ZvckNoZWNrKCk7XG4gIH1cblxuICBwcml2YXRlIGluaXRBdHRyaWJ1dGVzKGVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gICAgZWxlbWVudC50YWJJbmRleCA9IC0xO1xuICAgIGVsZW1lbnQuaWQgPSBgaGVhZGxlc3N1aS1tZW51LWl0ZW1zLSR7Z2VuZXJhdGVJZCgpfWA7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnbWVudScpO1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsbGVkYnknLCB0aGlzLm1lbnUubWVudUJ1dHRvbi5lbGVtZW50LmlkKTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdExpc3RlbmVycyhlbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICAgIHRoaXMucmVuZGVyZXIubGlzdGVuKGVsZW1lbnQsICdrZXlkb3duJywgKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleSkge1xuICAgICAgICBjYXNlICcgJzogLy8gU3BhY2VcbiAgICAgICAgICBpZiAodGhpcy5tZW51LnNlYXJjaFF1ZXJ5ICE9PSAnJykge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRoaXMubWVudS5zZWFyY2goZXZlbnQua2V5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRoaXMubWVudS5jbGlja0FjdGl2ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnRW50ZXInOlxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgdGhpcy5tZW51LmNsaWNrQWN0aXZlKCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnQXJyb3dEb3duJzpcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHRoaXMubWVudS5mb2N1c0l0ZW0oeyBraW5kOiAnRm9jdXNOZXh0JyB9KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdBcnJvd1VwJzpcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHRoaXMubWVudS5mb2N1c0l0ZW0oeyBraW5kOiAnRm9jdXNQcmV2aW91cycgfSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnSG9tZSc6XG4gICAgICAgIGNhc2UgJ1BhZ2VVcCc6XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB0aGlzLm1lbnUuZm9jdXNJdGVtKHsga2luZDogJ0ZvY3VzRmlyc3QnIH0pO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0VuZCc6XG4gICAgICAgIGNhc2UgJ1BhZ2VEb3duJzpcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHRoaXMubWVudS5mb2N1c0l0ZW0oeyBraW5kOiAnRm9jdXNMYXN0JyB9KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdFc2NhcGUnOlxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgdGhpcy5tZW51LnRvZ2dsZSgpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ1RhYic6XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGlmIChldmVudC5rZXkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLm1lbnUuc2VhcmNoKGV2ZW50LmtleSk7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbi8vIE1FTlUgSVRFTVxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbaGxNZW51SXRlbV0nLFxufSlcbmV4cG9ydCBjbGFzcyBNZW51SXRlbURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgpXG4gIGhsTWVudUl0ZW1EaXNhYmxlZCA9IGZhbHNlO1xuXG4gIGVsZW1lbnQhOiBIVE1MRWxlbWVudDtcblxuICBwcml2YXRlIHZpZXchOiBFbWJlZGRlZFZpZXdSZWY8YW55PjtcbiAgcHJpdmF0ZSBjb250ZXh0ID0geyBhY3RpdmU6IGZhbHNlIH07XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PixcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsXG4gICAgcHJpdmF0ZSBtZW51OiBNZW51RGlyZWN0aXZlLFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMlxuICApIHtcbiAgICB0aGlzLm1lbnUubWVudUl0ZW1zLnB1c2godGhpcyk7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnZpZXcgPSB0aGlzLnZpZXdDb250YWluZXJSZWYuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGVSZWYsIHtcbiAgICAgICRpbXBsaWNpdDogdGhpcy5jb250ZXh0LFxuICAgIH0pO1xuICAgIHRoaXMuZWxlbWVudCA9IHRoaXMudmlldy5yb290Tm9kZXNbMF07XG4gICAgdGhpcy5pbml0QXR0cmlidXRlcyh0aGlzLmVsZW1lbnQpO1xuICAgIHRoaXMuaW5pdExpc3RlbmVycyh0aGlzLmVsZW1lbnQpO1xuICB9XG5cbiAgc2V0QWN0aXZlKGFjdGl2ZTogYm9vbGVhbikge1xuICAgIHRoaXMuY29udGV4dC5hY3RpdmUgPSBhY3RpdmU7XG4gICAgdGhpcy52aWV3Lm1hcmtGb3JDaGVjaygpO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0QXR0cmlidXRlcyhlbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICAgIGVsZW1lbnQuaWQgPSBgaGVhZGxlc3N1aS1tZW51LWl0ZW0tJHtnZW5lcmF0ZUlkKCl9YDtcbiAgICBlbGVtZW50LnRhYkluZGV4ID0gLTE7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnbWVudWl0ZW0nKTtcbiAgICBpZiAodGhpcy5obE1lbnVJdGVtRGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWRpc2FibGVkJyk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBpbml0TGlzdGVuZXJzKGVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gICAgdGhpcy5yZW5kZXJlci5saXN0ZW4oZWxlbWVudCwgJ3BvaW50ZXJtb3ZlJywgKCkgPT5cbiAgICAgIHRoaXMubWVudS5mb2N1c0l0ZW0oeyBraW5kOiAnRm9jdXNTcGVjaWZpYycsIGl0ZW06IHRoaXMgfSlcbiAgICApO1xuXG4gICAgdGhpcy5yZW5kZXJlci5saXN0ZW4oZWxlbWVudCwgJ3BvaW50ZXJsZWF2ZScsICgpID0+XG4gICAgICB0aGlzLm1lbnUuZm9jdXNJdGVtKHsga2luZDogJ0ZvY3VzTm90aGluZycgfSlcbiAgICApO1xuXG4gICAgdGhpcy5yZW5kZXJlci5saXN0ZW4oZWxlbWVudCwgJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICBpZiAodGhpcy5obE1lbnVJdGVtRGlzYWJsZWQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5tZW51LnRvZ2dsZSgpO1xuICAgIH0pO1xuICB9XG59XG5cbnR5cGUgRm9jdXNGaXJzdCA9IHsga2luZDogJ0ZvY3VzRmlyc3QnIH07XG50eXBlIEZvY3VzTGFzdCA9IHsga2luZDogJ0ZvY3VzTGFzdCcgfTtcbnR5cGUgRm9jdXNQcmV2aW91cyA9IHsga2luZDogJ0ZvY3VzUHJldmlvdXMnIH07XG50eXBlIEZvY3VzTmV4dCA9IHsga2luZDogJ0ZvY3VzTmV4dCcgfTtcbnR5cGUgRm9jdXNOb3RoaW5nID0geyBraW5kOiAnRm9jdXNOb3RoaW5nJyB9O1xudHlwZSBGb2N1c1NwZWNpZmljID0geyBraW5kOiAnRm9jdXNTcGVjaWZpYyc7IGl0ZW06IE1lbnVJdGVtRGlyZWN0aXZlIH07XG5cbnR5cGUgRm9jdXNUeXBlID1cbiAgfCBGb2N1c0ZpcnN0XG4gIHwgRm9jdXNMYXN0XG4gIHwgRm9jdXNQcmV2aW91c1xuICB8IEZvY3VzTmV4dFxuICB8IEZvY3VzTm90aGluZ1xuICB8IEZvY3VzU3BlY2lmaWM7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtdLFxuICBleHBvcnRzOiBbXG4gICAgTWVudURpcmVjdGl2ZSxcbiAgICBNZW51QnV0dG9uRGlyZWN0aXZlLFxuICAgIE1lbnVJdGVtc1BhbmVsRGlyZWN0aXZlLFxuICAgIE1lbnVJdGVtRGlyZWN0aXZlLFxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBNZW51RGlyZWN0aXZlLFxuICAgIE1lbnVCdXR0b25EaXJlY3RpdmUsXG4gICAgTWVudUl0ZW1zUGFuZWxEaXJlY3RpdmUsXG4gICAgTWVudUl0ZW1EaXJlY3RpdmUsXG4gIF0sXG4gIHByb3ZpZGVyczogW10sXG59KVxuZXhwb3J0IGNsYXNzIE1lbnVNb2R1bGUge31cbiJdfQ==